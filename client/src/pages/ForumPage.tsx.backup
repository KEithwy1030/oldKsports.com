// client/src/pages/ForumPage.tsx (FINAL-FIXED VERSION 2)

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { forumAPI } from '../utils/api';
import { FORUM_CATEGORIES, POINTS_SYSTEM, USER_LEVELS } from '../data/constants';
import { formatTimeAgo } from '../utils/userUtils';
import { mockUsers } from '../data/mockData';
import { Plus, Search, Filter, MessageSquare, Clock, TrendingUp, Users, Briefcase, AlertTriangle, Eye, Heart, Reply } from 'lucide-react';
import PageTransition from '../components/PageTransition';
import Toast from '../components/Toast';
import UserAvatar from '../components/UserAvatar';
import UserLevelComponent from '../components/UserLevel';
import PostImageGallery from '../components/PostImageGallery';

const ForumPage: React.FC = () => {
  const navigate = useNavigate();
  const { user, getForumPosts, addForumPost, getBotAccounts, onAvatarUpdate, updateUserPoints } = useAuth();
  const [posts, setPosts] = useState<any[]>([]);
  const [showNewPostForm, setShowNewPostForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortBy, setSortBy] = useState('latest'); // 默认按最新活动排序
  const [newPost, setNewPost] = useState({
    title: '',
    content: '',
    category: 'general'
  });
  const [newPostImages, setNewPostImages] = useState<string[]>([]);
  const [toast, setToast] = useState<{visible: boolean; message: string; type: 'success' | 'error' | 'info' | 'points'}>({ visible: false, message: '', type: 'info' });

  // 确保首次进入时显示所有帖子
  useEffect(() => {
    setSelectedCategory('all');
  }, []);


  // 提取帖子内容中的图片
  const extractImagesFromContent = (content: string): string[] => {
    const imgRegex = /<img[^>]+src="([^"]+)"[^>]*>/g;
    const images: string[] = [];
    let match;
    
    while ((match = imgRegex.exec(content)) !== null) {
      images.push(match[1]);
    }
    
    return images;
  };

  // 提取图片网格内容
  const extractImageGridContent = (content: string): string => {
    const gridRegex = /<div class="post-images-grid"[^>]*>([\s\S]*?)<\/div>/g;
    const match = gridRegex.exec(content);
    return match ? match[1] : '';
  };

  // 移除HTML标签，获取纯文本内容
  const getTextContent = (content: string): string => {
    return content.replace(/<[^>]*>/g, '').trim();
  };

  useEffect(() => {
    const loadPosts = async () => {
      try {
        // 优先使用 AuthContext 的数据，确保与子版块页面数据一致
        const loadedPosts = await getForumPosts();
        const fallbackPosts = Array.isArray(loadedPosts) ? loadedPosts : [];
        
        // 调试：检查localStorage中的时间戳格式
        console.log('ForumPage: 使用AuthContext数据，帖子数量:', fallbackPosts.length);
        console.log('ForumPage: 帖子时间戳格式:', fallbackPosts.map(p => ({
          id: p.id,
          title: p.title,
          timestamp: p.timestamp,
          timestampType: typeof p.timestamp,
          isValid: !isNaN(new Date(p.timestamp).getTime())
        })));
        
        setPosts(fallbackPosts);
        
        // 同时尝试从API获取最新数据，但不依赖它
        try {
          const response = await forumAPI.getPosts(1, 50);
          const normalized = Array.isArray(response?.posts)
            ? response.posts
            : (Array.isArray(response) ? response : []);
          
          if (normalized.length > 0) {
            console.log('ForumPage: API数据可用，更新帖子列表');
            setPosts(normalized);
          }
        } catch (apiError) {
          console.warn('ForumPage: API数据获取失败，使用localStorage数据:', apiError);
        }
      } catch (error) {
        console.error('Failed to load posts:', error);
        setPosts([]);
      }
    };
    
    loadPosts();
  }, [getForumPosts]);

  useEffect(() => {
    if (user && onAvatarUpdate) {
      const unsubscribe = onAvatarUpdate((updatedUser) => {
        setPosts(currentPosts => {
          const updatedPosts = currentPosts.map(post => 
            post.author === updatedUser.username 
              ? { ...post, authorAvatar: updatedUser.avatar } 
              : post
          );
          localStorage.setItem('oldksports_forum_posts', JSON.stringify(updatedPosts));
          return updatedPosts;
        });
      });
      return () => unsubscribe();
    }
    return undefined;
  }, [user, onAvatarUpdate, getForumPosts]);

  const handleNewPostSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    
    const postCategory = selectedCategory === 'all' ? newPost.category : selectedCategory;
    
    try {
      // 将图片数据嵌入到内容中
      let contentWithImages = newPost.content;
      if (newPostImages.length > 0) {
        // 使用网格布局优化图片显示
        const imageHtml = `
          <div class="post-images-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; margin: 16px 0;">
            ${newPostImages.map((image, index) => 
              `<img src="${image}" alt="帖子图片 ${index + 1}" style="width: 100%; height: auto; border-radius: 8px; object-fit: cover;" class="post-image" />`
            ).join('')}
          </div>
        `;
        contentWithImages = contentWithImages + '\n\n' + imageHtml;
      }
      
      // 使用新的API创建帖子
      const response = await forumAPI.createPost(newPost.title, contentWithImages, postCategory);
      
      // API返回成功消息，说明帖子创建成功
      if (response && (typeof response === 'string' || response.message)) {
        // 刷新帖子列表
        const postsResponse = await forumAPI.getPosts(1, 50);
        if (postsResponse.posts) {
          setPosts(postsResponse.posts);
        }
        
        // 清空表单并关闭
        setNewPost({ title: '', content: '', category: 'general' });
        setNewPostImages([]);
        setShowNewPostForm(false);
        
        // 奖励积分并检查等级
        try {
          const newPoints = user.points + POINTS_SYSTEM.CREATE_POST;
          await updateUserPoints(newPoints);
          
          // 检查是否升级
          const oldLevel = user.level;
          const newLevel = USER_LEVELS.slice().reverse().find(level => newPoints >= level.minPoints);
          
          if (newLevel && newLevel.id !== oldLevel.id) {
            setToast({ visible: true, message: `🎉 恭喜！帖子发布成功！您从 ${oldLevel.name} 升级到 ${newLevel.name}！获得 ${POINTS_SYSTEM.CREATE_POST} 积分奖励`, type: 'success' });
          } else {
            setToast({ visible: true, message: `✅ 帖子发布成功！获得 ${POINTS_SYSTEM.CREATE_POST} 积分奖励`, type: 'success' });
          }
        } catch (error) {
          console.error('Failed to award points:', error);
          setToast({ visible: true, message: '✅ 帖子发布成功！', type: 'success' });
        }
      } else {
        console.warn('Unexpected response format:', response);
        setToast({ visible: true, message: '✅ 帖子发布成功！', type: 'success' });
      }
    } catch (error) {
      console.error('Failed to create post:', error);
      
      // 检查是否是重复标题错误
      if (error instanceof Error && error.message.includes('帖子标题已存在')) {
        setToast({ visible: true, message: '发帖失败：标题重复', type: 'error' });
      } else {
        setToast({ visible: true, message: '帖子发布失败，请重试', type: 'error' });
      }
    }
  };

  const botAccounts = useMemo(() => getBotAccounts(), [getBotAccounts]);

  const getUserInfo = useCallback((username: string) => {
    // 首先检查当前用户
    if (user && user.username === username) return user;
    
    // 然后检查bot账户
    const botAccount = botAccounts.find(bot => bot.username === username);
    if (botAccount) return botAccount;
    
    // 最后检查mock用户
    const mockUser = mockUsers.find((u: any) => u.username === username);
    if (mockUser) return mockUser;
    
    // 如果都没有找到，返回一个默认用户对象
    return {
      id: 0,
      username: username,
      email: '',
      points: 0,
      level: USER_LEVELS[0], // 默认等级
      joinDate: new Date(),
      lastLogin: new Date(),
      isAdmin: false,
      roles: ['other'],
      avatar: null,
      hasUploadedAvatar: false,
    };
  }, [user, botAccounts, posts]);

  // 始终以数组形态使用帖子数据，避免外部异常导致的非数组类型
  const safePosts = useMemo(() => Array.isArray(posts) ? posts : [], [posts]);

  const getUserAvatar = useCallback((username: string) => {
    const userInfo = getUserInfo(username);
    if (userInfo?.avatar) return userInfo.avatar;
    
    // 如果没有找到用户信息，尝试从帖子中获取头像
    const post = safePosts.find(p => p.author === username);
    if (post?.authorAvatar) return post.authorAvatar;
    
    return null;
  }, [getUserInfo, safePosts]);

  // 获取帖子的时间戳，支持多种字段名
  const getPostTimestamp = useCallback((post: any) => {
    return post.timestamp || post.created_at || post.createdAt || post.date;
  }, []);


  const handleSubforumClick = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setSearchTerm('');
  };

  const handleBackToMain = (): void => {
    setSelectedCategory('all');
    setSearchTerm('');
  };

  const getSubforumStats = useCallback((categoryId: string): { totalPosts: number; totalReplies: number; latestPost: string } => {
    const categoryPosts = safePosts.filter(post => post.category === categoryId);
    const totalPosts = categoryPosts.length;
    const totalReplies = categoryPosts.reduce((sum, post) => sum + (post.replies?.length || 0), 0);
    const latestPost = categoryPosts.length > 0 ? categoryPosts.reduce((latest, post) => new Date(post.timestamp) > new Date(latest.timestamp) ? post : latest) : null;
    return { totalPosts, totalReplies, latestPost: latestPost ? formatTimeAgo(latestPost.timestamp) : '暂无帖子' };
  }, [safePosts]);

  const sortedPosts = useMemo(() => {
    const filtered = safePosts.filter(post => {
      const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) || post.content.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === 'all' || post.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
    return [...filtered].sort((a, b) => {
      // 统一的排序逻辑：按最新活动时间排序（最新发布或最新回复）
      const getLatestActivity = (post: any) => {
        // 如果有回复，使用最新回复时间
        if (post.replies && post.replies.length > 0) {
          const latestReply = post.replies.reduce((latest: any, reply: any) => {
            const replyTime = new Date(reply.createdAt || reply.timestamp);
            const latestTime = new Date(latest.createdAt || latest.timestamp);
            return replyTime > latestTime ? reply : latest;
          });
          return new Date(latestReply.createdAt || latestReply.timestamp);
        }
        
        // 否则使用帖子创建时间
        const timestamp = getPostTimestamp(post);
        if (timestamp) {
          const postTime = new Date(timestamp);
          if (!isNaN(postTime.getTime())) return postTime;
        }
        
        // 如果时间戳无效，使用ID作为排序依据（ID越大越新）
        return new Date(parseInt(post.id) || 0);
      };
      
      const aTime = getLatestActivity(a);
      const bTime = getLatestActivity(b);
      
      // 根据排序方式决定顺序
      if (sortBy === 'latest') {
        // 按最新活动时间排序（最新发布或最新回复）
        return bTime.getTime() - aTime.getTime();
      } else if (sortBy === 'oldest') {
        return aTime.getTime() - bTime.getTime(); // 最旧在前
      } else if (sortBy === 'popular') {
        return (b.likes || 0) - (a.likes || 0); // 按点赞数排序
      } else if (sortBy === 'replies') {
        // 按回复数量排序，回复多的在前
        const aReplies = a.replies ? a.replies.length : 0;
        const bReplies = b.replies ? b.replies.length : 0;
        if (bReplies !== aReplies) {
          return bReplies - aReplies;
        }
        // 如果回复数相同，按最新活动时间排序
        return bTime.getTime() - aTime.getTime();
      }
      
      return 0;
    });
  }, [safePosts, searchTerm, selectedCategory, sortBy]);

  const categories = FORUM_CATEGORIES;

  return (
    <PageTransition>
      <div className="min-h-screen bg-gradient-radial from-slate-700 to-slate-900">
        {/* Toast */}
        <Toast
          visible={toast.visible}
          message={toast.message}
          type={toast.type}
          onClose={() => setToast({ visible: false, message: '', type: 'info' })}
        />
        <div className="bg-white/5 backdrop-blur-sm border-b border-white/10">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex items-center space-x-3">
              <button onClick={handleBackToMain} className={`flex items-center space-x-2 p-2 rounded-lg transition-all duration-200 ${selectedCategory !== 'all' ? 'bg-white/10 hover:bg-white/20 text-white' : 'opacity-50 cursor-not-allowed'}`} disabled={selectedCategory === 'all'}>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" /></svg>
                <span className="text-sm">返回</span>
              </button>
              <div className="flex items-center space-x-3 flex-1">
                <div className="p-2 bg-emerald-600/20 rounded-lg"><MessageSquare className="w-6 h-6 text-emerald-400" /></div>
                <div>
                  <h1 className="text-2xl font-bold text-white">体育论坛</h1>
                  <p className="text-gray-400">选择子版块开始交流</p>
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <button onClick={() => navigate('/forum/stats')} className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-200 flex items-center space-x-2">
                  <TrendingUp className="w-4 h-4" /><span>论坛统计</span>
                </button>
                {user && (
                  <button onClick={() => setShowNewPostForm(true)} className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition-all duration-200 flex items-center space-x-2">
                    <Plus className="w-4 h-4" /><span>发帖</span>
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="space-y-6">
            {/* 搜索框 */}
            <div className="bg-white/10 backdrop-blur-sm rounded-xl border border-white/20 p-6">
              <div className="relative max-w-md mx-auto">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input type="text" placeholder="搜索帖子标题或内容..." className="w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
              </div>
            </div>

            {/* 子版块选择 */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {/* 全部选项 */}
              <div onClick={() => handleBackToMain()} className={`cursor-pointer group transition-all duration-300 ${selectedCategory === 'all' ? 'ring-2 ring-emerald-500 bg-emerald-500/10' : 'hover:scale-105 hover:shadow-xl'}`}>
                <div className="bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-sm rounded-xl border border-white/20 p-6 h-80 flex flex-col justify-between">
                  <div className="text-center">
                    <div className="w-16 h-16 mx-auto rounded-full flex items-center justify-center mb-4 bg-purple-500/20 border-2 border-purple-400/30">
                      <svg className="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">全部帖子</h3>
                    <p className="text-gray-400 text-sm">查看所有分类的帖子</p>
                  </div>
                  <div className="space-y-3">
                    <div className="flex justify-between text-sm"><span className="text-gray-400">帖子数</span><span className="text-white font-semibold">{safePosts.length}</span></div>
                    <div className="flex justify-between text-sm"><span className="text-gray-400">回复数</span><span className="text-white font-semibold">{safePosts.reduce((sum, post) => sum + (post.replies?.length || 0), 0)}</span></div>
                    <div className="text-xs text-gray-500">最新: {safePosts.length > 0 ? formatTimeAgo(getPostTimestamp(safePosts[0])) : '暂无帖子'}</div>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-emerald-400 text-sm mt-4 opacity-0 group-hover:opacity-100 transition-opacity">
                    <span>点击查看</span>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" /></svg>
                  </div>
                </div>
              </div>

              {/* 各个子版块 */}
              {categories.map((category) => {
                const stats = getSubforumStats(category.id);
                const isSelected = selectedCategory === category.id;
                return (
                  <div key={category.id} onClick={() => handleSubforumClick(category.id)} className={`cursor-pointer group transition-all duration-300 ${isSelected ? 'ring-2 ring-emerald-500 bg-emerald-500/10' : 'hover:scale-105 hover:shadow-xl'}`}>
                    <div className="bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-sm rounded-xl border border-white/20 p-6 h-80 flex flex-col justify-between">
                      <div className="text-center">
                        <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center mb-4 ${category.id === 'general' ? 'bg-emerald-500/20 border-2 border-emerald-400/30' : category.id === 'business' ? 'bg-blue-500/20 border-2 border-blue-400/30' : 'bg-red-500/20 border-2 border-red-400/30'}`}>
                          {category.id === 'general' ? (<Users className="w-8 h-8 text-emerald-400" />) : category.id === 'business' ? (<Briefcase className="w-8 h-8 text-blue-400" />) : (<AlertTriangle className="w-8 h-8 text-red-400" />)}
                        </div>
                        <h3 className="text-xl font-bold text-white mb-2">{category.name}</h3>
                        <p className="text-gray-400 text-sm">{category.description}</p>
                      </div>
                      <div className="space-y-3">
                        <div className="flex justify-between text-sm"><span className="text-gray-400">帖子数</span><span className="text-white font-semibold">{stats.totalPosts}</span></div>
                        <div className="flex justify-between text-sm"><span className="text-gray-400">回复数</span><span className="text-white font-semibold">{stats.totalReplies}</span></div>
                        <div className="text-xs text-gray-500">最新: {stats.latestPost}</div>
                      </div>
                      <div className="flex items-center justify-center space-x-2 text-emerald-400 text-sm mt-4 opacity-0 group-hover:opacity-100 transition-opacity">
                        <span>点击查看</span>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" /></svg>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* 帖子列表 */}
            <div className="mt-12">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">
                  {selectedCategory === 'all' ? '最新帖子' : `${categories.find(c => c.id === selectedCategory)?.name} 帖子`}
                </h2>
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <Filter className="w-4 h-4 text-gray-400" />
                    <select className="bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-emerald-500" value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
                      <option value="latest">最新活动</option><option value="oldest">最早发布</option><option value="popular">最受欢迎</option><option value="replies">回复最多</option>
                    </select>
                  </div>
                  <div className="flex items-center space-x-4">
                    <span className="text-gray-400">{sortedPosts.length} 个帖子</span>
                    {user && (
                      <button onClick={() => setShowNewPostForm(true)} className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition-all duration-200 flex items-center space-x-2">
                        <Plus className="w-4 h-4" /><span>发帖</span>
                      </button>
                    )}
                  </div>
                </div>
              </div>
              <div className="space-y-4 stagger-children" style={{ '--stagger-delay': '9' } as React.CSSProperties}>
                {sortedPosts.length === 0 ? (
                  <div className="text-center py-12">
                    <MessageSquare className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-white mb-2">暂无帖子</h3>
                    <p className="text-gray-300">
                      {selectedCategory === 'all' ? '成为第一个发帖的人吧！' : `该板块暂无帖子，成为第一个发帖的人吧！`}
                    </p>
                  </div>
                ) : (
                  sortedPosts.map((post) => {
                      const avatarUrl = getUserAvatar(post.author);
                      const lastReplyTime = post.replies && post.replies.length > 0 ? formatTimeAgo(post.replies[post.replies.length - 1].createdAt) : formatTimeAgo(post.timestamp);
                      return (
                        <Link key={post.id} to={`/forum/post/${String(post.id)}`} className="block bg-white/10 backdrop-blur-sm rounded-xl border border-white/20 hover:border-emerald-400 transition-all duration-300 overflow-hidden cursor-pointer h-64">
                          <div className="p-6 h-full">
                            <div className="flex gap-6 h-full">
                              {/* 左侧用户信息 */}
                              <div className="flex flex-col items-center space-y-3 flex-shrink-0">
                                <UserAvatar 
                                  username={post.author} 
                                  size="lg"
                                  className="w-16 h-16 border-2 border-white/20"
                                />
                                <div className="text-center">
                                  <div className="font-semibold text-white text-sm mb-1">{post.author}</div>
                                  <UserLevelComponent username={post.author} />
                                </div>
                              </div>
                              
                              {/* 右侧内容 - 固定高度容器 */}
                              <div className="flex-1 min-w-0 flex flex-col">
                                <div className="flex items-start justify-between mb-3">
                                  <div className="flex items-center space-x-2">
                                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${post.category === 'general' ? 'bg-emerald-500/20 text-emerald-300 border-emerald-400/30' : post.category === 'business' ? 'bg-blue-500/20 text-blue-300 border-blue-400/30' : 'bg-red-500/20 text-red-300 border-red-400/30'}`}>
                                      {categories.find(c => c.id === post.category)?.name || post.category}
                                    </span>
                                  </div>
                                  <div className="flex items-center space-x-3 text-xs text-gray-400">
                                    <div className="flex items-center space-x-1">
                                      <Clock size={14} />
                                      <span>发布: {formatTimeAgo(getPostTimestamp(post))}</span>
                                    </div>
                                    {post.replies && post.replies.length > 0 && (
                                      <div className="flex items-center space-x-1 text-emerald-400">
                                        <MessageSquare size={14} />
                                        <span>最新回复: {formatTimeAgo(post.replies[post.replies.length - 1].createdAt)}</span>
                                      </div>
                                    )}
                                  </div>
                                </div>
                                
                                <h3 className="text-lg font-semibold text-white mb-2 hover:text-emerald-400 transition-colors line-clamp-1">{post.title}</h3>
                                
                                {/* 内容区域 - 固定高度 */}
                                <div className="flex-1 flex flex-col min-h-0">
                                  {/* Text Content */}
                                  <p className="text-gray-300 text-sm line-clamp-2 mb-2">
                                    {(() => {
                                      const textContent = getTextContent(post.content);
                                      return textContent.length > 150 ? `${textContent.substring(0, 150)}...` : textContent;
                                    })()}
                                  </p>
                                  
                                  {/* Image Gallery - 固定高度区域 */}
                                  <div className="flex-1 min-h-0">
                                    {(() => {
                                      const images = extractImagesFromContent(post.content);
                                      return images.length > 0 ? (
                                        <div className="h-full">
                                          <PostImageGallery 
                                            images={images} 
                                            maxPreviewImages={6}
                                            className="h-full"
                                          />
                                        </div>
                                      ) : (
                                        <div className="h-full flex items-center">
                                          <p className="text-gray-400 text-sm">点击查看详情</p>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                </div>
                                
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-4 text-xs text-gray-400">
                                    <div className="flex items-center space-x-1">
                                      <Eye size={14} />
                                      <span>{post.views}</span>
                                    </div>
                                    <div className="flex items-center space-x-1">
                                      <Reply size={14} />
                                      <span>{post.replies?.length || 0}</span>
                                    </div>
                                    <div className="flex items-center space-x-1">
                                      <Heart size={14} />
                                      <span>{post.likes}</span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </Link>
                      );
                    })
                  )}
                </div>
              </div>
            </div>
              {showNewPostForm && (
                <div className="bg-white/10 backdrop-blur-sm rounded-xl border border-white/20 p-6 mb-6">
                  <h2 className="text-xl font-semibold text-white mb-4">发布新帖</h2>
                  <form onSubmit={handleNewPostSubmit}>
                    <div className="space-y-4">
                      <div><input type="text" placeholder="帖子标题" className="w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-emerald-500" value={newPost.title} onChange={(e) => setNewPost({ ...newPost, title: e.target.value })} required /></div>
                      <div>
                        <select className="w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-emerald-500" value={selectedCategory === 'all' ? newPost.category : selectedCategory} onChange={(e) => setNewPost({ ...newPost, category: e.target.value })} disabled={selectedCategory !== 'all'}>
                          {categories.filter(category => selectedCategory === 'all' || category.id === selectedCategory).map(category => (<option key={category.id} value={category.id}>{category.name}</option>))}
                        </select>
                        {selectedCategory !== 'all' && (<p className="text-sm text-emerald-400 mt-2">在 {categories.find(c => c.id === selectedCategory)?.name} 中发帖</p>)}
                      </div>
                      <div><textarea placeholder="帖子内容" rows={6} className="w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-emerald-500" value={newPost.content} onChange={(e) => setNewPost({ ...newPost, content: e.target.value })} required /></div>
                      
                      {/* 图片上传功能 - 紧凑版本 */}
                      <div className="bg-white/5 rounded-lg p-3 border border-white/10">
                        <div className="flex items-center justify-between mb-3">
                          <div className="text-white text-sm font-medium">📷 图片上传</div>
                          <div className="text-gray-400 text-xs">
                            {newPostImages.length}/9
                          </div>
                        </div>
                        
                        {/* 上传按钮 */}
                        <div className="mb-3">
                          <input
                            type="file"
                            accept="image/*"
                            multiple
                            onChange={(e) => {
                              const files = e.target.files;
                              if (files) {
                                // 检查是否超过限制
                                if (newPostImages.length + files.length > 9) {
                                  alert('最多只能上传9张图片');
                                  return;
                                }
                                
                                const newImages: string[] = [];
                                Array.from(files).forEach((file) => {
                                  // 检查文件大小
                                  if (file.size > 5 * 1024 * 1024) {
                                    alert(`图片 ${file.name} 大小超过5MB限制`);
                                    return;
                                  }
                                  
                                  const reader = new FileReader();
                                  reader.onload = (event) => {
                                    const result = event.target?.result as string;
                                    
                                    // 压缩图片
                                    const img = new Image();
                                    img.onload = () => {
                                      const canvas = document.createElement('canvas');
                                      const ctx = canvas.getContext('2d');
                                      
                                      // 计算压缩后的尺寸 - 高质量压缩
                                      let { width, height } = img;
                                      const maxWidth = 1200;
                                      const maxHeight = 1200;
                                      
                                      if (width > height) {
                                        if (width > maxWidth) {
                                          height = (height * maxWidth) / width;
                                          width = maxWidth;
                                        }
                                      } else {
                                        if (height > maxHeight) {
                                          width = (width * maxHeight) / height;
                                          height = maxHeight;
                                        }
                                      }
                                      
                                      canvas.width = width;
                                      canvas.height = height;
                                      
                                      // 绘制压缩后的图片
                                      ctx?.drawImage(img, 0, 0, width, height);
                                      
                                      // 转换为Base64，使用高质量
                                      const compressedResult = canvas.toDataURL('image/jpeg', 0.85);
                                      
                                      // 检查压缩后的文件大小
                                      const sizeInBytes = (compressedResult.length * 3) / 4;
                                      const sizeInMB = sizeInBytes / (1024 * 1024);
                                      
                                      if (sizeInMB > 2) {
                                        alert(`图片 ${file.name} 压缩后仍然太大 (${sizeInMB.toFixed(2)}MB)，请选择更小的图片`);
                                        return;
                                      }
                                      
                                      newImages.push(compressedResult);
                                      
                                      if (newImages.length === files.length) {
                                        setNewPostImages([...newPostImages, ...newImages]);
                                      }
                                    };
                                    img.src = result;
                                  };
                                  reader.readAsDataURL(file);
                                });
                              }
                            }}
                            className="hidden"
                            id="new-post-image-upload"
                          />
                          <label
                            htmlFor="new-post-image-upload"
                            className="inline-flex items-center px-4 py-2 bg-emerald-600 text-white text-sm rounded-md hover:bg-emerald-700 cursor-pointer transition-colors"
                          >
                            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            添加图片 (最多9张)
                          </label>
                        </div>
                        
                        {/* 图片预览 - 紧凑网格 */}
                        {newPostImages.length > 0 && (
                          <div className="grid grid-cols-4 gap-2 mb-3">
                            {newPostImages.map((image, index) => (
                              <div key={index} className="relative">
                                <img
                                  src={image}
                                  alt={`上传的图片 ${index + 1}`}
                                  className="w-full h-16 object-cover rounded-md border border-white/20"
                                />
                                <button
                                  type="button"
                                  onClick={() => {
                                    const newImages = newPostImages.filter((_, i) => i !== index);
                                    setNewPostImages(newImages);
                                  }}
                                  className="absolute -top-1 -right-1 w-5 h-5 bg-red-600 text-white rounded-full flex items-center justify-center hover:bg-red-700 text-xs"
                                >
                                  ×
                                </button>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        {/* 使用提示 - 更简洁 */}
                        <div className="text-xs text-gray-400">
                          JPG/PNG/GIF • 单张≤5MB • 最多9张
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-end space-x-4">
                        <button type="button" onClick={() => setShowNewPostForm(false)} className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-200">取消</button>
                        <button type="submit" className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition-all duration-200">发布帖子</button>
                      </div>
                    </div>
                  </form>
                </div>
              )}
              <div className="space-y-4 stagger-children" style={{ '--stagger-delay': '9' } as React.CSSProperties}>
                {sortedPosts.length === 0 ? (
                  <div className="text-center py-12">
                    <MessageSquare className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-white mb-2">暂无帖子</h3>
                    <p className="text-gray-300">{searchTerm || selectedCategory !== 'all' ? '没有找到匹配的帖子，试试调整搜索条件' : '选择子版块开始交流'}</p>
                  </div>
                ) : (
                  sortedPosts.map((post) => {
                    const avatarUrl = getUserAvatar(post.author);
                    const lastReplyTime = post.replies && post.replies.length > 0 ? formatTimeAgo(post.replies[post.replies.length - 1].createdAt) : formatTimeAgo(post.timestamp);
                    return (
                      <Link key={post.id} to={`/forum/post/${String(post.id)}`} className="block bg-white/10 backdrop-blur-sm rounded-xl border border-white/20 hover:border-emerald-400 transition-all duration-300 overflow-hidden cursor-pointer h-64">
                        <div className="p-6 h-full">
                          <div className="flex gap-6 h-full">
                            {/* 左侧用户信息 */}
                            <div className="flex flex-col items-center space-y-3 flex-shrink-0">
                              <UserAvatar 
                                username={post.author} 
                                size="lg"
                                className="w-16 h-16 border-2 border-white/20"
                              />
                              <div className="text-center">
                                <div className="font-semibold text-white text-sm mb-1">{post.author}</div>
                                <UserLevelComponent username={post.author} />
                              </div>
                            </div>
                            
                            {/* 右侧内容 - 固定高度容器 */}
                            <div className="flex-1 min-w-0 flex flex-col">
                              <div className="flex items-start justify-between mb-3">
                                <div className="flex items-center space-x-2">
                                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${post.category === 'general' ? 'bg-emerald-500/20 text-emerald-300 border-emerald-400/30' : post.category === 'business' ? 'bg-blue-500/20 text-blue-300 border-blue-400/30' : 'bg-red-500/20 text-red-300 border-red-400/30'}`}>
                                    {categories.find(c => c.id === post.category)?.name || post.category}
                                  </span>
                                </div>
                                <div className="flex items-center space-x-3 text-xs text-gray-400">
                                  <div className="flex items-center space-x-1">
                                    <Clock size={14} />
                                    <span>发布: {formatTimeAgo(getPostTimestamp(post))}</span>
                                  </div>
                                  {post.replies && post.replies.length > 0 && (
                                    <div className="flex items-center space-x-1 text-emerald-400">
                                      <MessageSquare size={14} />
                                      <span>最新回复: {formatTimeAgo(post.replies[post.replies.length - 1].createdAt)}</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                              
                              <h3 className="text-lg font-semibold text-white mb-2 hover:text-emerald-400 transition-colors line-clamp-1">{post.title}</h3>
                              
                              {/* 内容区域 - 固定高度 */}
                              <div className="flex-1 flex flex-col min-h-0">
                                {/* Text Content */}
                                <p className="text-gray-300 text-sm line-clamp-2 mb-2">
                                  {(() => {
                                    const textContent = getTextContent(post.content);
                                    return textContent.length > 150 ? `${textContent.substring(0, 150)}...` : textContent;
                                  })()}
                                </p>
                                
                                {/* Image Gallery - 固定高度区域 */}
                                <div className="flex-1 min-h-0">
                                  {(() => {
                                    const images = extractImagesFromContent(post.content);
                                    return images.length > 0 ? (
                                      <div className="h-full">
                                        <PostImageGallery 
                                          images={images} 
                                          maxPreviewImages={6}
                                          className="h-full"
                                        />
                                      </div>
                                    ) : (
                                      <div className="h-full flex items-center">
                                        <p className="text-gray-400 text-sm">点击查看详情</p>
                                      </div>
                                    );
                                  })()}
                                </div>
                              </div>
                              
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-4 text-xs text-gray-400">
                                  <div className="flex items-center space-x-1">
                                    <Eye size={14} />
                                    <span>{post.views}</span>
                                  </div>
                                  <div className="flex items-center space-x-1">
                                    <Reply size={14} />
                                    <span>{post.replies?.length || 0}</span>
                                  </div>
                                  <div className="flex items-center space-x-1">
                                    <Heart size={14} />
                                    <span>{post.likes}</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </Link>
                    );
                  })
                )}
              </div>
            </div>
        </div>
        {user && (
          <button onClick={() => navigate('/forum/new', { state: { from: '/forum' } })} className="fixed bottom-6 right-6 md:hidden w-14 h-14 bg-emerald-600 text-white rounded-full shadow-lg hover:bg-emerald-700 transition-all duration-200 flex items-center justify-center hover:scale-110">
            <Plus className="w-6 h-6" />
          </button>
        )}
      </div>
    </PageTransition>
  );
};

export default ForumPage;